---
- name: Install Packetbeat
  hosts: hosts
  become: true
  vars:
    haproxy_ssl: false

  environment: "{{ deployment_environment_variables | default({}) }}"

  vars_files:
    - vars/variables.yml

  pre_tasks:
    - include_tasks: common_task_install_elk_repo.yml

    - name: Ensure packetbeat is installed
      apt:
        name: "{{ item }}"
        state: "{{ elk_package_state | default('present') }}"
        update_cache: true
      with_items:
        - tcpdump
        - packetbeat
      tags:
        - package_install

    - name: exit playbook after uninstall
      meta: end_play
      when:
        - elk_package_state | default('present') == 'absent'

  post_tasks:
    - name: Drop packetbeat conf file
      template:
        src: templates/packetbeat.yml.j2
        dest: /etc/packetbeat/packetbeat.yml

    - name: Enable and restart packetbeat
      systemd:
        name: "packetbeat"
        enabled: true
        state: restarted


- name: Load Packetbeat Dashboards
  hosts: hosts[0]
  become: true
  vars_files:
    - vars/variables.yml
  tasks:
    - name: Load templates
      shell: >-
        {% set IP_ARR=[] %}
        {% for host in groups['elastic-logstash'] %}
        {%   set _ = IP_ARR.insert(loop.index, ((hostvars[host]['ansible_host'] | string) + ":" + (elastic_port | string))) %}
        {% endfor %}
        packetbeat setup
        {{ item }}
        -E 'output.logstash.enabled=false'
        -E 'output.elasticsearch.hosts={{ IP_ARR | to_json }}'
        -e -v
      with_items:
        - "--template"
        - "--dashboards"
      register: templates
      until: templates is success
      retries: 3
      delay: 2
  tags:
    - beat-setup
